using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;

namespace LifeCouple.WebApi.Common
{
    public class JWTHandler : IJWTGenerator
    {

        private readonly JWTSettingsModel _settings;
        private readonly JwtSecurityTokenHandler _jwtSecurityTokenHandler = new JwtSecurityTokenHandler();
        private SecurityKey _issuerSigningKey;
        private SigningCredentials _signingCredentials;
        private JwtHeader _jwtHeader;

        public TokenValidationParameters Parameters { get; private set; }

        public JWTHandler(IOptions<JWTSettingsModel> settings)
        {
            _settings = settings.Value;
            InitializeHmac();
            InitializeJwtParameters();
        }

        private void InitializeHmac()
        {
            _issuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_settings.HmacSecretKey));
            _signingCredentials = new SigningCredentials(_issuerSigningKey, SecurityAlgorithms.HmacSha256);
        }

        private void InitializeJwtParameters()
        {
            _jwtHeader = new JwtHeader(_signingCredentials);
            Parameters = new TokenValidationParameters
            {
                ValidateAudience = false,
                ValidIssuer = _settings.Issuer,
                IssuerSigningKey = _issuerSigningKey
            };
        }

        public JWTModel Create(string userId, string emailAddress, string firstName, string lastName)
        {
            var nowUtc = DateTime.UtcNow;
            var expires = nowUtc.AddDays(_settings.ExpiryDays);

            var claims = new[]
{
                    new Claim(JwtRegisteredClaimNames.Sub, userId),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString("N")),
                    new Claim(JwtRegisteredClaimNames.UniqueName, userId),
                    new Claim(JwtRegisteredClaimNames.Email, emailAddress),
                    new Claim("oid", userId), // only piece we need to Identify the user since that is what we will get from JWTs generated by ADB2C, see also https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-token-and-claims
                    new Claim(JwtRegisteredClaimNames.FamilyName, lastName),
                    new Claim(JwtRegisteredClaimNames.GivenName, firstName)
                };
            var payload = new JwtPayload(_settings.Issuer, _settings.Audience, claims, nowUtc, expires, nowUtc);


            var jwt = new JwtSecurityToken(_jwtHeader, payload);
            var token = _jwtSecurityTokenHandler.WriteToken(jwt);

            return new JWTModel
            {
                Token = token,
                Expires = jwt.ValidTo
            };

            // TODO: Remove only once ADB2C is implemented and tested.
            #region Remove only once ADB2C is implemented and tested.
            //var claims = new[]
            //{
            //    new Claim(JwtRegisteredClaimNames.Sub, r.PrimaryEmail),
            //    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            //    new Claim(JwtRegisteredClaimNames.UniqueName, r.Id.ToString()),
            //    new Claim("oid", r.ExternalRefId) //only piece we need to Identify the user
            //};

            ////TODO: Change to use asymmetricKey
            //var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Tokens:Key"]));
            //var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            //var token = new JwtSecurityToken(
            //  _config["Tokens:Issuer"],
            //  _config["Tokens:Audience"],
            //  claims,
            //  expires: DateTime.UtcNow.AddDays(30), //.AddYears(10) = used to generate tokens for testing...
            //  signingCredentials: creds);

            //var results = new TokenResponseInfo
            //{
            //    Token = new JwtSecurityTokenHandler().WriteToken(token),
            //    Expiration = token.ValidTo
            //};
            #endregion
        }
    }
}
