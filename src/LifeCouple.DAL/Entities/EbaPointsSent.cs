using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace LifeCouple.DAL.Entities
{
    /// <summary>
    /// Emotional Bank Account Points Sent/Deposited by a given User. Only 1 instance per User. 
    /// To get the Balances (Sent and Received) for a given User simply retrieve all entities with the given RelationshipId. 
    /// That will give EBA points Sent by User A and also the points Sent by User B to User A, which is the points Received by User A from User B. 
    /// The main reasons for this model is that we don't have to concern ourselves with concurrency since only one and the same user can initiate an update to each given instance of this entity, 
    /// and it also allows User A to send/deposit EBA points to a future/not yet invited Partner/User B. 
    /// TotalPoints could in theory be calculated on the fly as the data is retrieved, but as we increase the number of Transactions we will have to split Transactions out into it's own table/document, 
    /// which we can do with a trigger, including keep the 5 most recent in this collection and also calculate the TotalPoints. 
    /// </summary>
    public class EbaPointsSent : CosmosDbEntity
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("dtCreated")]
        public DateTimeOffset DTCreated { get; set; }

        [JsonProperty("dtLastUpdated")]
        public DateTimeOffset DTLastUpdated { get; set; }

        [JsonProperty("userprofileId")]
        public string UserprofileId { get; set; }

        [JsonProperty("relationshipId")]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Also the other Users TotalPointsReceived. 
        /// </summary>
        [JsonProperty("totalPoints")]
        public int TotalPoints { get; set; }

        /// <summary>
        /// For the time being we will keep all Transactions in this Entity, but as the nr of Transaction increases we will have to refactor this to only keep the 5 most recent transactions.
        /// See comment on this Class itself for details. 
        /// </summary>
        [JsonProperty("transactions")]
        public List<EbaTransaction> Transactions { get; set; }


        public class EbaTransaction
        {
            /// <summary>
            /// unique key (guid) generated by the application business logic
            /// </summary>
            [JsonProperty("key")]
            public string Key { get; set; }

            [JsonProperty("points")]
            public int Points { get; set; }

            [JsonProperty("postedDT")]
            public DateTimeOffset PostedDT { get; set; }

            [JsonProperty("comment")]
            public string Comment { get; set; }
        }

    }
}
